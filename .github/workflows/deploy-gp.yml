name: Deploy Vitepress site to GitHub Pages [npm, pnpm & yarn 1.x]

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

env:
  BUILD_PATH: "." # default value when not using subfolders
  # BUILD_PATH: subfolder

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      # https://github.com/actions/checkout
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: ${{ env.BUILD_PATH }}

      #- name: Checkout vite-plugin-pwa
      #  uses: actions/checkout@v3
      #  with:
      #    repository: carlesbarreda/vite-plugin-pwa
      #    ref: astro2-integration
      #    path: ${{ env.BUILD_PATH }}/packages/vite-plugin-pwa

      - name: Detect package manager
        id: detect-package-manager
        #working-directory: ${{ github.workspace }}
        working-directory: ${{ env.BUILD_PATH }}
        run: |
          if [ -f "yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install --no-frozen-lockfile" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "pnpm-lock.yaml" ]; then
            echo "manager=pnpm" >> $GITHUB_OUTPUT
            echo "command=install --no-frozen-lockfile" >> $GITHUB_OUTPUT
            echo "runner=pnpm" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci --no-frozen-lockfile" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine packager manager"
            exit 1
          fi

      # https://github.com/actions/setup-node
      # https://github.com/actions/setup-node/blob/main/docs/advanced-usage.md
      - name: Setup Node
        uses: actions/setup-node@v3
        if: ${{ steps.detect-package-manager.outputs.manager != 'pnpm' }}
        with:
          node-version: "18"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: ${{ env.BUILD_PATH }}/package-lock.json

      # https://github.com/actions/setup-node
      # https://github.com/actions/setup-node/blob/main/docs/advanced-usage.md
      - name: Setup Node (pnpm)
        uses: actions/setup-node@v3
        if: ${{ steps.detect-package-manager.outputs.manager == 'pnpm' }}
        with:
          node-version: "18"

      # https://github.com/pnpm/action-setup
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        id: pnpm-install
        if: ${{ steps.detect-package-manager.outputs.manager == 'pnpm' }}
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        if: ${{ steps.detect-package-manager.outputs.manager == 'pnpm' }}
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v3
        if: ${{ steps.detect-package-manager.outputs.manager == 'pnpm' }}
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # https://github.com/actions/configure-pages
      # https://github.com/actions/configure-pages/blob/main/action.yml
      # https://github.com/actions/starter-workflows/tree/main/pages
      # https://github.com/actions/starter-workflows/blob/main/pages/static.yml
      # https://github.com/actions/starter-workflows/blob/main/pages/astro.yml
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v3

      #- name: Install vite-plugin-pwa dependencies
      #  run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      #  working-directory: ${{ env.BUILD_PATH }}/packages/vite-plugin-pwa

      #- name: Build vite-plugin-pwa dependencies
      #  run: ${{ steps.detect-package-manager.outputs.manager }} run build
      #  working-directory: ${{ env.BUILD_PATH }}/packages/vite-plugin-pwa

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
        working-directory: ${{ env.BUILD_PATH }}

      - name: Build
        run: |
          ${{ steps.detect-package-manager.outputs.manager }} run docs:build \
            --site "${{ steps.pages.outputs.origin }}" \
            --base "${{ steps.pages.outputs.base_path }}"
        working-directory: ${{ env.BUILD_PATH }}

      # https://github.com/actions/upload-pages-artifact
      # https://github.com/actions/upload-pages-artifact/blob/main/action.yml
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          name: github-pages
          path: ${{ env.BUILD_PATH }}/docs/.vitepress/dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      # https://github.com/actions/deploy-pages
      # https://github.com/actions/deploy-pages/blob/main/action.yml
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
